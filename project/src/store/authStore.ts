import { create } from 'zustand';
import { AuthState, User } from '../types';
import { mockUser } from '../data/mockData';
import { z } from 'zod';

interface AuthStore extends AuthState {
  login: (email: string, password: string) => Promise<void>;
  register: (name: string, email: string, password: string) => Promise<void>;
  logout: () => void;
}

const signInSchema = z.object({
  email: z.string().email('Please enter a valid email address'),
  password: z.string().min(6, 'Password must be at least 6 characters'),
});

// In a real app, this would make API calls to a backend service
const useAuthStore = create<AuthStore>((set) => ({
  user: null,
  isAuthenticated: false,
  isLoading: false,
  error: null,
  
  login: async (email: string, password: string) => {
    set({ isLoading: true, error: null });
    
    try {
      // Simulate API call
      await new Promise((resolve) => setTimeout(resolve, 1000));
      
      // Accept any credentials for testing
      set({ user: mockUser, isAuthenticated: true, isLoading: false });
    } catch (error) {
      set({ error: 'Failed to login. Please try again.', isLoading: false });
    }
  },
  
  register: async (name: string, email: string, password: string) => {
    set({ isLoading: true, error: null });
    
    try {
      // Simulate API call
      await new Promise((resolve) => setTimeout(resolve, 1000));
      
      // In a real app, this would create a user in the database
      const newUser: User = {
        id: '2', // This would be generated by the server
        name,
        email,
        role: 'farmer',
      };
      
      set({ user: newUser, isAuthenticated: true, isLoading: false });
    } catch (error) {
      set({ error: 'Failed to register. Please try again.', isLoading: false });
    }
  },
  
  logout: () => {
    set({ user: null, isAuthenticated: false });
  },
}));

export default useAuthStore;